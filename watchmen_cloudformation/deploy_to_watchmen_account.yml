# Copyright 2017 Insurance Australia Group Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
- hosts: localhost
  connection: local
  vars:
    s3_cf_bucket:     "{{ BUCKET_NAME_CF }}"
    s3_lambda_bucket: "{{ BUCKET_NAME_LAMBDA }}"
    s3_report_bucket: "{{ BUCKET_NAME_REPORT }}"
    s3_distribution_bucket: "{{ BUCKET_NAME_DISTRIBUTION }}"
    deploy_elastic_search: "{{ DEPLOY_ELASTIC_SEARCH }}"
    elastic_search_instance_count: "{{ ELASTIC_SEARCH_INSTANCE_COUNT }}"
    deploy_monitoring: "{{ DEPLOY_MONITORING }}"
    deploy_reporting: "{{ DEPLOY_REPORTING }}"
    deploy_citizen_update: "{{ DEPLOY_CITIZEN_UPDATE }}"
    env:              "{{ ENV }}"
    billing_code:     CC7504126
    stack_name:       Watchmen
    application:      Watchmen
    server_name:      WatchmenLambda
    launched_by:      bamboo_user
    prefix: ""
  tasks:

    - name: "Logging deployment variables"
      debug:
        msg:
          - "s3_cf_bucket: {{ s3_cf_bucket }}"
          - "s3_lambda_bucket: {{ s3_lambda_bucket }}"
          - "s3_report_bucket: {{ s3_report_bucket }}"
          - "s3_distribution_bucket: {{ s3_distribution_bucket }}"
          - "deploy_elastic_search: {{ deploy_elastic_search }}"
          - "elastic_search_instance_count: {{ elastic_search_instance_count }}"
          - "deploy_monitoring: {{ deploy_monitoring }}"
          - "deploy_reporting: {{ deploy_reporting }}"
          - "deploy_citizen_update: {{ deploy_citizen_update }}"
          - "env: {{ env }}"
          - "prefix: {{ prefix }}"

    - name: "Upload CloudFormation templates to {{ s3_cf_bucket }} s3 bucket"
      s3:
        bucket: "{{ s3_cf_bucket }}"
        object: "/{{ item }}"
        src: "{{ playbook_dir }}/files/{{ item }}"
        mode: put
        region: "{{ REGION }}"
      register: s3
      until: s3|success
      retries: 5
      delay: 10
      with_items:
          - citizen-update.yml
          - es-cluster.yml
          - es-subscriptions.yml
          - monitoring.yml
          - reporting.yml
          - roles.yml
          - watchmen.yml
          - verification-rule.yml

    - name: "Run main CloudFormation template"
      cloudformation:
        stack_name: "{{ prefix }}{{ stack_name }}"
        state: present
        template: "{{ playbook_dir }}/files/watchmen.yml"
        template_parameters:
          LambdaS3Bucket: "{{ s3_lambda_bucket }}"
          CloudFormationS3Bucket: "{{ s3_cf_bucket }}"
          ReportS3Bucket: "{{ s3_report_bucket }}"
          DistributionS3BucketName: "{{ s3_distribution_bucket }}"
          Prefix: "{{ prefix }}"
          DeployElasticSearch: "{% if deploy_elastic_search  == '' %}{{ 'false' }}{% else %}{{ deploy_elastic_search  }}{% endif %}"
          ElasticSearchInstanceCount: "{% if elastic_search_instance_count  == '' %}{{ 2 }}{% else %}{{ elastic_search_instance_count  }}{% endif %}"
          DeployMonitoring: "{% if deploy_monitoring  == '' %}{{ 'false' }}{% else %}{{ deploy_monitoring  }}{% endif %}"
          DeployReporting: "{% if deploy_reporting  == '' %}{{ 'false' }}{% else %}{{ deploy_reporting  }}{% endif %}"
          DeployCitizenUpdate: "{% if deploy_citizen_update  == '' %}{{ 'false' }}{% else %}{{ deploy_citizen_update  }}{% endif %}"
        tags:
          Environment: "{{ env }}"
          Billing Code: "{{ billing_code }}"
          Application: "{{ application }}"
          Server Name: "{{ server_name }}"
          Launched By: "{{ launched_by }}"
        region: "{{ REGION }}"

    - name: "Get Cloudformation stack info"
      cloudformation_facts:
        stack_name: "{{ prefix }}{{ stack_name }}"
      register: stack

    - name: "Get Ansible Facts for Cloudformation Stack"
      set_fact:
        output: "{{ stack.ansible_facts.cloudformation }}"

    - name: "Get Cloudformation Stack Status"
      set_fact:
        stack_status:  "{{ output[item]['stack_description']['stack_status'] }}"
      with_items: "{{ prefix }}{{ stack_name }}"

    - fail:
        msg: "Build Failed. Stack status: {{ stack_status }}"
      when:
        - stack_status != "CREATE_COMPLETE"
        - stack_status != "UPDATE_COMPLETE"
